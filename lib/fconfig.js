// Generated by CoffeeScript 1.4.0
(function() {
  var Fconfig;

  Fconfig = (function() {

    Fconfig.prototype.config = {};

    Fconfig.prototype.dir = process.cwd() + '/configs/';

    Fconfig.prototype.files = [];

    function Fconfig(opts) {
      var _ref;
      this.env_default = (_ref = opts.env_default) != null ? _ref : 'development';
      if (!opts.env) {
        throw new Error("Couldn't determine current enviroment to base config upon");
      }
      this.env = opts.env;
      if (opts.dir) {
        this.dir = opts.dir;
      }
      if (!opts.config) {
        throw new Error("No config file given");
      }
      this.files.push(this.dir + opts.config);
      this.parseConfigs();
    }

    Fconfig.prototype.parseConfigs = function() {
      var configs, k, v, _results;
      configs = require(this.files[0]);
      this.config[this.env_default] = configs[this.env_default];
      _results = [];
      for (k in configs) {
        v = configs[k];
        if (k !== this.env_default) {
          _results.push(this.config[k] = this._recursiveMerge(this._recursiveMerge({}, configs[this.env_default]), v));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Fconfig.prototype.get = function(k, env) {
      env = env != null ? env : this.env;
      if (!k) {
        return this.config[env];
      }
      if (~k.indexOf(".")) {
        return this._getDotNotated(k, env);
      }
      if (typeof this.config[env][k] === 'function') {
        return this.config[env][k]();
      } else {
        return this.config[env][k];
      }
    };

    Fconfig.prototype.getAll = function() {
      return this.config;
    };

    Fconfig.prototype._getDotNotated = function(k, env) {
      var walker;
      walker = function(o, i) {
        return o[i];
      };
      return k.split(".").reduce(walker, this.config[env]);
    };

    Fconfig.prototype.changeEnv = function(env) {
      return this.env = env;
    };

    Fconfig.prototype._recursiveMerge = function(obj1, obj2) {
      var prop;
      for (prop in obj2) {
        try {
          if (obj2[prop].constructor === Object) {
            obj1[prop] = this._recursiveMerge(obj1[prop], obj2[prop]);
          } else {
            obj1[prop] = obj2[prop];
          }
        } catch (err) {
          obj1[prop] = obj2[prop];
        }
      }
      return obj1;
    };

    return Fconfig;

  })();

  module.exports = Fconfig;

}).call(this);
